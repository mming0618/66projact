了解了，我明白了你的意思。如果你已经有本地比特币区块链的数据，可以使用`bitcoinlib`库来解析区块数据并提取所需的值。以下是一个简单的示例代码：

```python
from bitcoinlib.wallets import Wallet
import csv

# 本地比特币节点的连接信息
node_connection_params = {
    "rpc_url": "http://localhost:8332",
    "rpc_username": "your_rpc_username",
    "rpc_password": "your_rpc_password",
}

# 打开本地比特币钱包
wallet = Wallet.create("local_wallet", keys=[{"private_key": "your_private_key"}], network="testnet")

# 保存数据到CSV文件
def save_to_csv(data):
    with open('bitcoin_data.csv', 'a', newline='') as csvfile:
        csv_writer = csv.writer(csvfile)
        csv_writer.writerow(data)

# 获取区块数据并提取所需的值
def process_block(block):
    for transaction in block.transactions:
        for input_ in transaction.inputs:
            r = input_.get('r', '')
            s = input_.get('s', '')
            pubkey = input_.get('pubkey', '')
            txid = input_.get('txid', '')
            message_hash = input_.get('message_hash', '')
            block_time = block.time

            # 保存到CSV文件
            save_to_csv([r, s, pubkey, txid, message_hash, block_time])

# 主程序
if __name__ == "__main__":
    # 连接到本地比特币节点
    wallet.set_connection_params(**node_connection_params)

    # 获取当前最新的区块号
    end_block = wallet.get_block_count()

    block_number = 1  # 你可以设置开始的区块号

    while block_number <= end_block:
        # 获取区块数据
        block = wallet.get_block(block_number)
        
        # 处理区块数据
        process_block(block)

        block_number += 1
```

请注意，这只是一个简单的示例，具体的数据结构可能会有所不同，你可能需要根据实际情况调整代码。同样，记得替换示例代码中的占位符为你的实际信息。
